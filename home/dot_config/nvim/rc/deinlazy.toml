# -------------------------------------------------------------------
# bigger frameworks or functions

[[plugins]]
repo = 'https://github.com/tpope/vim-speeddating'
on_cmd = 'SpeedDatingFormat'
on_map = { n = ['<c-a>', '<c-x>'] }
hook_post_source = '''
1SpeedDatingFormat %-d-%-m-%y
'''

#for rest, harpoon and todo
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'
name = 'plenary'

[[plugins]]
repo = 'https://github.com/folke/todo-comments.nvim'
depends = 'plenary'
on_cmd = ['TodoQuickFix', 'TodoLocList']
hook_source = '''
lua <<EOF
  require("todo-comments").setup{}
EOF
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'Gclog', 'Gdiffsplit', 'GBrowse']
depends = 'rhubarb'
hook_add = '''
  nnoremap <leader>gg :-tabnew<cr>:Git<CR>
  nnoremap <leader>gl :-tabnew<cr>:Gclog<CR>
  nnoremap <leader>gd :-tabnew %<cr>:Gdiffsplit!<cr>
'''

[[plugins]]
repo = 'https://github.com/tpope/vim-rhubarb'
name = 'rhubarb'

[[plugins]]
repo = 'https://github.com/MattesGroeger/vim-bookmarks'
on_map = '<Plug>Bookmark'
hook_add = '''
  let g:bookmark_sign = 'ðŸ“˜'
  let g:bookmark_annotation_sign = 'ðŸ“—'
  let g:bookmark_no_default_key_mappings = 1
  let g:bookmark_auto_save_file = stdpath('data') . '/bookmarks'

  nmap <Leader>bb <Plug>BookmarkToggle
  nmap <Leader>bi <Plug>BookmarkAnnotate
  nmap <Leader>ba <Plug>BookmarkShowAll
  nmap <Leader>bn <Plug>BookmarkNext
  nmap <Leader>bp <Plug>BookmarkPrev
  nmap <Leader>bc <Plug>BookmarkClear
  nmap <Leader>bx <Plug>BookmarkClearAll
  nmap <Leader>bk <Plug>BookmarkMoveUp
  nmap <Leader>bj <Plug>BookmarkMoveDown
  nmap <Leader>bg <Plug>BookmarkMoveToLine
'''

[[plugins]]
repo = 'https://github.com/FooSoft/vim-argwrap'
on_map = { n = ['gJ'] }
hook_add = '''
  nnoremap gJ :ArgWrap<CR>
  let g:argwrap_tail_comma_braces = '[{'
'''

# [[plugins]]
# repo = 'https://github.com/AndrewRadev/splitjoin.vim'
# on_map = { n = [' J', ' j'] }
# hook_source = '''
#   let g:splitjoin_split_mapping = ''
#   let g:splitjoin_join_mapping = ''
#
#   nmap <Leader>J :SplitjoinJoin<cr>
#   nmap <Leader>j :SplitjoinSplit<cr>
# '''
# # only has clever definitions for these fts
# on_ft = [
#   'c',
#   'coffee',
#   'css',
#   'elixir',
#   'elm',
#   'eruby',
#   'go',
#   'haml',
#   'handlebars',
#   'html',
#   'java',
#   'javascript',
#   'json',
#   'jsx',
#   'tsx',
#   'lua',
#   'perl',
#   'php',
#   'python',
#   'r',
#   'ruby',
#   'rust',
#   'scss',
#   'less',
#   'shell',
#   'tex',
#   'vimscript',
#   'yaml',
# ]

[[plugins]]
repo = 'https://github.com/aMOPel/vim-log-print'
on_map = '<Plug>LogPrint'
hook_add = '''
	let g:log_print#default_mappings = 0

	nmap <silent> gl <Plug>LogPrintToggle
	nmap <silent> [g <Plug>LogPrintAbove
	nmap <silent> ]g <Plug>LogPrintBelow

	let g:log_print#languages = #{
		\ gdscript: #{pre:"print(", post:")"},
		\ typescript: #{pre:"console.log(", post:")"},
		\ sh: #{pre:"echo "},
		\ }
'''

[[plugins]]
repo = 'https://github.com/wsdjeg/dein-ui.vim'
on_cmd = 'DeinUpdate'
hook_add = '''
	nnoremap <leader>pu <esc>:<c-u>DeinUpdate<CR>:silent! helptags ALL<CR>
'''

# [[plugins]]
# repo = 'tversteeg/registers.nvim'
# if = 'has("nvim")'
# on_cmd = 'Registers'
# on_map = {
#   i = '<c-r>',
#   n = '"',
#   v = '"',
# }

[[plugins]]
repo = 'voldikss/vim-floaterm'
on_cmd = 'Floaterm'
hook_add = '''
  let g:floaterm_shell = 'zsh'
  let g:floaterm_width = 0.7
  let g:floaterm_height = 0.7

  nnoremap <silent>	<leader>ff   :FloatermToggle<CR>
  tnoremap <silent>	<C-W>	<C-\><C-n>:FloatermToggle<CR>

  nnoremap <leader>fg :FloatermNew --autoclose=2 --disposable gitui<CR>
  nnoremap <leader>ft :FloatermNew --autoclose=2 --disposable taskwarrior-tui<CR>
  nnoremap <leader>fw :FloatermNew --autoclose=0 --disposable --width=0.9 timew week<CR>
'''

[[plugins]]
repo = 'szw/vim-maximizer'
on_cmd = 'Maximizer'
hook_add = '''
  let g:maximizer_set_default_mapping = 0
  nnoremap <c-w>m :MaximizerToggle!<CR>
  nnoremap <c-w><c-m> :MaximizerToggle!<CR>
'''

# [[plugins]]
# repo = 'kana/vim-altr'
# on_map = '<Plug>'
# hook_add = '''
#   nmap <leader>a <Plug>(altr-back)
#   nmap <leader>A <Plug>(altr-forward)
# '''
# hook_source = '''
#   " call altr#remove_all()
#   call altr#define('%/src/%.cpp', '%/src/%.h*', '%/include/%.h*')
#   call altr#define('%.gd', 'test/unit/test_%.gd')
#   call altr#define('addons/*/%.gd', 'test/unit/test_%.gd')
# '''

# -------------------------------------------------------------------
# quickfix

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
name = 'bqf'
if = 'has("nvim")'
on_event = ['Grepper', 'WinNew', 'QuickFixCmdPre']

[[plugins]]
repo = 'mhinz/vim-grepper'
depends = ['bqf']
on_cmd = 'Grepper'
on_map = '<Plug>(GrepperOperator)'
hook_add = '''
  nnoremap <leader>gr :Grepper -tool rg<CR>
  nnoremap <leader>*  :Grepper -tool rg -cword -noprompt<cr>

  nmap gr <Plug>(GrepperOperator)
  xmap gr <Plug>(GrepperOperator)

  aug Grepper
      au!
      au User Grepper ++nested call setqflist([], 'r', {'context': {'bqf': {'pattern_hl': '\%#' . getreg('/')}}})
  aug END

  let g:grepper = {}
  let g:grepper.open = 1
  let g:grepper.switch = 1
  let g:grepper.quickfix = 1
  let g:grepper.searchreg = 1
  let g:grepper.highlight = 1
  let g:grepper.dir = 'cwd'
  let g:grepper.tools = ['rg']

  let g:grepper.operator = {}
  let g:grepper.operator.open = 1
  let g:grepper.operator.switch = 1
  let g:grepper.operator.prompt = 0
  let g:grepper.operator.quickfix = 1
  let g:grepper.operator.searchreg = 1
  let g:grepper.operator.highlight = 1
  let g:grepper.operator.dir = 'cwd'
  let g:grepper.operator.tools = ['rg']
'''
hook_post_source = '''
  let g:grepper.rg.grepprg .= ' --smart-case'
'''

# -------------------------------------------------------------------
# snippets

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = ['snippets', 'vsnip-integ']
name = 'vsnip'
on_event = 'InsertEnter'
hook_add = '''
  let g:vsnip_snippet_dir = expand("$XDG_CONFIG_HOME/nvim/snippets")

  imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
  smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'

  imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
  smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
name = 'vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
name = 'snippets'

# -------------------------------------------------------------------
# debug

[[plugins]]
repo = 'https://github.com/mfussenegger/nvim-dap'
if = 'has("nvim")'
name = 'dap'
on_lua = 'dap'
hook_source = '''
lua <<EOF
local dap = require("dap")

dap.adapters.chrome = {
    type = "executable",
    command = "node",
    args = {os.getenv("HOME") .. "/.local/ghq/github.com/Microsoft/vscode-chrome-debug/out/src/chromeDebug.js"}
}

dap.configurations.javascript = {
    {
        type = "chrome",
        request = "attach",
        program = "${file}",
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = "inspector",
        port = 9222,
        webRoot = "${workspaceFolder}"
    }
}

dap.configurations.typescript = {
    {
        type = "chrome",
        request = "attach",
        program = "${file}",
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = "inspector",
        port = 9222,
        webRoot = "${workspaceFolder}"
    }
}

EOF
'''
hook_add = '''
	" au MyAutoCmd FileType dap-repl lua require('dap.ext.autocompl').attach()
	nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
	nnoremap <silent> <F6> :lua require'dap'.step_over()<CR>
	nnoremap <silent> <F7> :lua require'dap'.step_into()<CR>
	nnoremap <silent> <F8> :lua require'dap'.step_out()<CR>
	nnoremap <silent> <leader>dr :lua require'dap'.restart()<CR>
	nnoremap <silent> <leader>db :lua require'dap'.toggle_breakpoint()<CR>
	nnoremap <silent> <leader>dB :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
	" nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
	" nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
	" nnoremap <silent> <leader>dl :lua require'dap'.run_last()<CR>
'''

[[plugins]]
repo = 'https://github.com/rcarriga/nvim-dap-ui'
if = 'has("nvim")'
on_lua = 'dapui'
depends = 'dap'
hook_source = '''
lua <<EOF
require("dapui").setup({
  -- icons = { expanded = "â–¾", collapsed = "â–¸" },
  -- mappings = {
  --   expand = { "<CR>", "<2-LeftMouse>" },
  --   open = "o",
  --   remove = "d",
  --   edit = "e",
  --   repl = "r",
  -- },
  sidebar = {
    -- open_on_start = true,
    size = 80,
    position = "right",
  },
  tray = {
    open_on_start = false,
    -- elements = { "repl" },
    -- height = 10,
    -- position = "bottom",
  },
  -- floating = {
  --   max_height = nil,
  --   max_width = nil,
  --   mappings = {
  --     close = { "q", "<Esc>" },
  --   },
  -- },
  windows = { indent = 1 },
})
EOF
'''
hook_add = '''
	nnoremap <silent> <leader>du :lua require("dapui").toggle()<cr>
	nnoremap <silent> <leader>de <Cmd>lua require("dapui").eval()<CR>
	vnoremap <silent> <leader>de <Cmd>lua require("dapui").eval()<CR>
'''

# -------------------------------------------------------------------
# autocomletion

# [[plugins]]
# repo = 'https://github.com/f3fora/cmp-spell'
# if = 'has("nvim")'
# name = 'cmp-spell'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-calc'
if = 'has("nvim")'
name = 'cmp-calc'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-vsnip'
if = 'has("nvim")'
name = 'cmp-vsnip'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-emoji'
if = 'has("nvim")'
name = 'cmp-emoji'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-buffer'
if = 'has("nvim")'
name = 'cmp-buffer'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-nvim-lua'
if = 'has("nvim")'
name = 'cmp-nvim-lua'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-path'
if = 'has("nvim")'
name = 'cmp-path'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-nvim-lsp'
if = 'has("nvim")'
name = 'cmp-nvim-lsp'
hook_post_update = 'echo system([resolve(expand("$DEIN_REPOS/tzachar/cmp-tabnine/install.sh"))])'
[[plugins]]
repo = 'https://github.com/hrsh7th/cmp-cmdline'
if = 'has("nvim")'
name = 'cmp-cmdline'
hook_source = '''
  cmap <tab> <NOP>
  cmap <s-tab> <NOP>
  set nowildmenu
'''


[[plugins]]
repo = 'https://github.com/tzachar/fuzzy.nvim'
if = 'has("nvim")'
on_event = 'BufEnter'
name = 'fuzzy'
depends = 'fzf-native'
[[plugins]]
repo = 'https://github.com/nvim-telescope/telescope-fzf-native.nvim'
if = 'has("nvim")'
name = 'fzf-native'
hook_post_update = 'echo system(["make", "-C", resolve(expand("$DEIN_REPOS/nvim-telescope/telescope-fzf-native.nvim/"))])'
[[plugins]]
repo = 'https://github.com/tzachar/cmp-fuzzy-path'
if = 'has("nvim")'
depends = ['fuzzy', 'cmp-path']
name = 'cmp-fuzzy-path'

[[plugins]]
repo = 'https://github.com/lukas-reineke/cmp-rg'
if = 'has("nvim")'
name = 'cmp-rg'

[[plugins]]
repo = 'https://github.com/tzachar/cmp-tabnine'
if = 'has("nvim")'
name = 'cmp-tabnine'
hook_source = '''
lua <<EOF
local tabnine = require('cmp_tabnine.config')
tabnine:setup({
  max_lines = 1000;
  max_num_results = 20;
  sort = true;
  run_on_every_keystroke = true;
  snippet_placeholder = '..';
})
EOF
'''

[[plugins]]
repo = 'https://github.com/hrsh7th/nvim-cmp/'
if = 'has("nvim")'
name = 'cmp'
depends = [
'lspkind',
'autopairs',
'vsnip',
'cmp-rg',
'cmp-emoji',
'cmp-tabnine',
'cmp-cmdline',
'cmp-calc',
'cmp-fuzzy-path',
'cmp-vsnip',
'cmp-buffer',
'cmp-nvim-lua',
'cmp-nvim-lsp',
]
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
set completeopt=menu,menuone,noselect
set complete=

lua <<EOF
local cmp = require'cmp'

cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = {
    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-g>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    ['<C-q>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
    }),
    ['<CR>'] = cmp.mapping.confirm(),
    ['<C-n>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      else
        cmp.complete()
      end
    end, { "i", "s" }),
    ['<C-p>'] = cmp.mapping(cmp.mapping.select_prev_item(), { "i", "s" } )
  },
  sources = {
    { name = 'cmp_tabnine', priority=1000, max_item_count=20  },
    { name = 'vsnip', priority=900, max_item_count=10  },
    -- { name = 'fuzzy_path', priority=900, max_item_count=10  },
    { name = 'nvim_lsp', priority=500, max_item_count=20 },
    { name = 'nvim_lua', priority=500, max_item_count=20  },
    -- { name = 'buffer', priority=100, keyword_length=3, max_item_count=5  },
    { name = 'emoji' },
    { name = 'rg', priority=500, keyword_length=3, max_item_count=10  },
    { name = 'calc', priority=100 },
    -- { name = 'spell', priority=100 },
    -- { name = 'neorg' },
  },
  formatting = {
    format = require('lspkind').cmp_format({
      with_text = true,
      maxwidth = 50,
      menu = {
        cmp_tabnine = '[T9]',
        vsnip = '[VSNIP]',
        fuzzy_path = '[PATH]',
        nvim_lsp = '[LSP]',
        nvim_lua = '[LUA]',
        buffer = '[BUF]',
        rg = '[RG]',
        cmdline = '[CMD]',
        calc = '[CLC]',
      },
    })
  },
  experimental = {
    native_menu = false,
    ghost_text = true,
  }
})

cmp.setup.cmdline('?', {
  sources = {
    { name = 'buffer', max_item_count = 30, }
  }
})

cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer', max_item_count = 30, }
  }
})

cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'fuzzy_path', max_item_count = 20 }
  }, {
    { name = 'cmdline', max_item_count = 30, }
  }),
})

local cmp_autopairs = require('nvim-autopairs.completion.cmp')
cmp.event:on( 
  'confirm_done',
  cmp_autopairs.on_confirm_done(
    { map_char = { tex = '{' } }
  )
)
EOF
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
name = 'autopairs'
if = 'has("nvim")'
hook_source = '''
lua <<EOF
require('nvim-autopairs').setup({
  disable_filetype = { "TelescopePrompt" },
  fast_wrap = {
    map = '<c-f>',
  },
  enable_check_bracket_line = true,
  ignored_next_char = "[%w%.]",
})
EOF
'''

[[plugins]]
repo = 'https://github.com/onsails/lspkind-nvim'
name = 'lspkind'
if = 'has("nvim")'

# -------------------------------------------------------------------
# lsp

[[plugins]]
repo = 'neovim/nvim-lspconfig'
name = 'lspconfig'
depends = ['lsp-installer', 'cmp-nvim-lsp', 'schemastore', 'dd', 'fidget']
if = 'has("nvim")'
on_ft = [
  "tex",
  "latex",
  "bib",
  "markdown",

  "html",
  "css",
  "javascript",
  "typescript",
  "vue",

  "gdscript",

  "python",
  "nim",

  "lua",

  "cpp",
  "cmake",

  "json",
  "yaml",
  "toml",

  "sh"
]
hook_source = '''
lua require 'lsp'
'''

[[plugins]]
name = 'lsp-installer'
repo = 'https://github.com/williamboman/nvim-lsp-installer'

[[plugins]]
repo = 'https://gitlab.com/yorickpeterse/nvim-dd'
name = 'dd'
if = 'has("nvim")'
hook_source = '''
lua <<EOF
require('dd').setup{
  timeout = 1000,
}
EOF
'''

[[plugins]]
repo = 'https://github.com/j-hui/fidget.nvim'
name = 'fidget'
if = 'has("nvim")'
hook_post_source = '''
lua <<EOF
require"fidget".setup{}
EOF
'''

[[plugins]]
repo = 'https://github.com/b0o/SchemaStore.nvim'
name = 'schemastore'

# -------------------------------------------------------------------
# beautify

