# -------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  " nnoremap <leader>pu <esc>:<c-u>call dein#update()<CR>:silent! helptags ALL<CR>
  nnoremap <leader>pr <esc>:<c-u>call dein#recache_runtimepath()<CR>:silent! helptags ALL<CR>
  nnoremap <leader>pi <esc>:<c-u>call dein#install()<CR>:silent! helptags ALL<CR>
'''

# -------------------------------------------------------------------
# basics

[[plugins]]
repo = 'https://github.com/machakann/vim-sandwich'
hook_add = '''
  runtime vim-sandwich/surround.vim
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-unimpaired'

# cant be lazy loaded
[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'junegunn/vim-slash'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
if = 'has("nvim")'
hook_add = '''
  let g:cursorhold_updatetime = 100
'''

[[plugins]]
repo = 'svermeulen/vim-cutlass'
hook_add = '''
  nnoremap m d
  xnoremap m d

  nnoremap mm dd
  nnoremap M D
'''

[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]]
repo = 'https://github.com/tommcdo/vim-exchange'

[[plugins]]
repo = 'https://github.com/numToStr/Comment.nvim'
if = 'has("nvim")'
hook_post_source = '''
lua << EOF
require('Comment').setup{
  mappings = {
    basic = true,
    extra = true,
    extended = false,
  },
  opleader = {
    line = 'gc',
    block = 'gb',
  },
  pre_hook = function(ctx)
    local u = require('Comment.utils')
    if ctx.ctype == u.ctype.line or ctx.cmotion == u.cmotion.line then
      return require('ts_context_commentstring.internal').calculate_commentstring()
    end
  end,
}
EOF
'''

[[plugins]]
repo = 'https://github.com/lukas-reineke/indent-blankline.nvim'
if = 'has("nvim")'
hook_post_source = '''
" let g:indent_blankline_use_treesitter = v:true
" let g:indent_blankline_show_current_context = v:true
lua <<EOF
require("indent_blankline").setup {
  char = "|",
  buftype_exclude = {"terminal", "help", "clap_input", "floaterm", "wilder", "lsp-installer"}
}
EOF
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_post_source = '''
" let g:matchup_surround_enabled = 1
" let g:matchup_transmute_enabled = 1
let g:matchup_text_obj_enabled = 0
let g:matchup_matchparen_offscreen = {'method': 'popup'}

'''

[[plugins]]
repo = 'kevinhwang91/rnvimr'
if = 'has("nvim")'
on_cmd = 'Rnvimr'
hook_add = '''
  let g:rnvimr_enable_ex = 1
  let g:rnvimr_enable_picker = 0
  let g:rnvimr_enable_bw = 1

  nnoremap <silent> <leader>rr :RnvimrToggle<CR>
  let g:rnvimr_layout = {
      \ 'relative': 'editor',
      \ 'width': float2nr(round(0.7 * &columns)),
      \ 'height': float2nr(round(0.7 * &lines)),
      \ 'col': float2nr(round(0.15 * &columns)),
      \ 'row': float2nr(round(0.15 * &lines)),
      \ 'style': 'minimal'
      \ }
'''

# for caw and log_print
[[plugins]]
repo = 'Shougo/context_filetype.vim'
name = 'context_filetype'
hook_add = '''
let g:context_filetype#ignore_patterns = {
  \ 'toml': ['^\s*#\s*'],
  \ }
'''

# -------------------------------------------------------------------
# wordobjects

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'https://github.com/AndrewRadev/dsf.vim'
hook_add = '''
  let g:dsf_no_mappings = 1

  nmap dsf <Plug>DsfDelete
  nmap csf <Plug>DsfChange
'''

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
let g:camelcasemotion_key = ','
'''

[[plugins]]
repo = 'wellle/targets.vim'
hook_add = '''
  let g:targets_aiAI = 'ai  '
  let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al'
  let g:targets_nl = '  '
'''

# -------------------------------------------------------------------
# lsp



# -------------------------------------------------------------------
# syntax highlighting

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
name = 'treesitter'
if = 'has("nvim")'
# on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_post_source = '''
lua <<EOF

-- local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

-- parser_configs.norg = {
--     install_info = {
--         url = "https://github.com/nvim-neorg/tree-sitter-norg",
--         files = { "src/parser.c", "src/scanner.cc" },
--         branch = "main"
--     },
-- }

-- parser_configs.http = {
--   install_info = {
--     url = "https://github.com/NTBBloodbath/tree-sitter-http",
--     files = { "src/parser.c" },
--     branch = "main",
--   },
-- }

require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    -- "viml",
    -- "http",
    -- "norg",
    -- "latex",

    "html",
    "css",
    "javascript",
    "typescript",
    "vue",

    "gdscript",
    "godot_resource",

    "python",

    "lua",

    "cpp",
    "cmake",

    "json",
    "toml",
    "yaml",

    "bash",
    "regex",
    "comment",
    "dockerfile",
  },
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = true,
  },
  indent = {
    enable = false,
    disable = {
      "gdscript",
      "python",
    }
  },
  context_commentstring = {
    enable = true,
    config = {
      vim = '" %s',
      lua = '-- %s',
      toml = '# %s',
    }
  },
  matchup = {
    enable = true,
  },
  textsubjects = {
    enable = true,
    keymaps = {
      ['<cr>'] = 'textsubjects-smart',
    }
  },
}
EOF
'''

[[plugins]]
repo = 'https://github.com/JoosepAlviste/nvim-ts-context-commentstring'
if = 'has("nvim")'

[[plugins]]
repo = 'https://github.com/RRethy/nvim-treesitter-textsubjects'

# -------------------------------------------------------------------
# autocomletion

# -------------------------------------------------------------------
# beautify

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
if = 'has("nvim")'
name = 'devicons'

# [[plugins]]
# repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'https://github.com/nvim-lualine/lualine.nvim'
depends = 'gps'
if = 'has("nvim")'
hook_post_source = '''
function! ObsessionStatusMod() abort
  return ObsessionStatus("Session", "")
endfunction
lua <<EOF
local gps = require("nvim-gps")

require('lualine').setup {
  options = {
    theme = 'onedark',
    section_separators = "",
    component_separators = "",
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff'},
    lualine_c = {
      { gps.get_location, cond = gps.is_available },
    },
    lualine_x = {
      {
        'diagnostics',
        padding = 2,
        sources = {'nvim_diagnostic'},
        sections = {'error', 'warn', 'info', 'hint'},
        symbols = {error = ' ', warn = ' ', info = ' ', hint = ' '},
        update_in_insert = false,
      },
    },
    lualine_y = {'progress'},
    lualine_z = {
      {
        'filetype',
        colored = false,
        icon_only = true
      },
      {
        'filename',
        file_status = true,
        path = 1,
        shorting_target = 40
      },
    },
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {
      {
        'filetype',
        colored = false,
        icon_only = true
      },
      {
        'filename',
        file_status = true,
        path = 1,
        shorting_target = 40
      },
    },
  },
  tabline = {
    lualine_a = {'tabs'},
    lualine_b = {'ObsessionStatusMod'},
    lualine_c = {},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {},
    lualine_z = {},
  },
  extensions = {'quickfix', 'fugitive'},
}
EOF
'''

[[plugins]]
repo = 'https://github.com/navarasu/onedark.nvim'
frozen = true
if = 'has("nvim")'
hook_post_source = '''
  colorscheme onedark
  lua require('onedark').setup()
'''

# -------------------------------------------------------------------
# keep



# [[plugins]]
# repo = 'https://github.com/NTBBloodbath/rest.nvim'
# if = 'has("nvim")'
# depends = 'plenary'
# hook_add = '''
#   nmap <silent> <leader>cc <Plug>RestNvim
#   nmap <silent> <leader>cp <Plug>RestNvimPreview
#   nmap <silent> <leader>cr <Plug>RestNvimLast
# '''
# hook_post_source = '''
# lua <<EOF
# require("rest-nvim").setup({
#     -- Open request results in a horizontal split
#     result_split_horizontal = false,
#     -- Skip SSL verification, useful for unknown certificates
#     skip_ssl_verification = false,
#     -- Highlight request on run
#     highlight = {
#       enabled = true,
#       timeout = 150,
#     },
#     -- Jump to request line on run
#     jump_to_request = false,
#   })
# EOF
# '''

# [[plugins]]
# repo = 'https://github.com/nvim-neorg/neorg'
# depends = 'plenary'
# hook_post_source = '''
# lua << EOF
#   require('neorg').setup {
#       -- Tell Neorg what modules to load
#       load = {
#           ["core.defaults"] = {}, -- Load all the default modules
#           ["core.norg.concealer"] = {}, -- Allows for use of icons
#           ["core.norg.dirman"] = { -- Manage your directories with Neorg
#               config = {
#                   workspaces = {
#                       my_workspace = "~/neorg"
#                   }
#               }
#           },
#           ["core.keybinds"] = { -- Configure core.keybinds
#               config = {
#                   default_keybinds = true, -- Generate the default keybinds
#                   neorg_leader = "<Leader>o" -- This is the default if unspecified
#               }
#           },
#           ["core.norg.completion"] = {
#             config = {
#               engine = "nvim-cmp",
#             },
#           },
#       },
#   }
# EOF
# '''


# for harpoon
# [[plugins]]
# repo = 'nvim-lua/popup.nvim'
# if = 'has("nvim")'
# name = 'popup'

# [[plugins]]
# repo = 'ThePrimeagen/harpoon'
# if = 'has("nvim")'
# on_lua = 'harpoon'
# depends = ['popup', 'plenary']
# hook_add = '''
#   nnoremap <leader>hh :lua require("harpoon.ui").toggle_quick_menu()<cr>
#   nnoremap <leader>ha :lua require("harpoon.mark").add_file()<CR>
#   nnoremap <C-m> :lua require("harpoon.ui").nav_file(1)<CR>
#   nnoremap <C-n> :lua require("harpoon.ui").nav_file(2)<CR>
#   nnoremap <C-h> :lua require("harpoon.ui").nav_file(3)<CR>
#   nnoremap <C-y> :lua require("harpoon.ui").nav_file(4)<CR>
#   autocmd MyAutoCmd FileType harpoon nnoremap <buffer> <esc> :wq<cr>
# '''
# hook_post_source = '''
# lua <<EOF
# require("harpoon").setup({
#   global_settings = {
#       save_on_toggle = false,
#       save_on_change = true,
#   },
# })
# EOF
# '''

# -------------------------------------------------------------------
# test

[[plugins]]
repo = 'https://github.com/folke/which-key.nvim'
hook_post_source = '''
lua <<EOF
require("which-key").setup{
  plugins = {
    marks = false,
    spelling = {
      enabled = true,
      suggestions = 20,
    },
  },
}
EOF
'''

[[plugins]]
repo = 'https://github.com/simrat39/symbols-outline.nvim'
hook_add = '''
lua <<EOF
vim.g.symbols_outline = {
  highlight_hovered_item = true,
  show_guides = true,
  auto_preview = false,
  position = 'right',
  relative_width = true,
  width = 50,
  show_numbers = false,
  show_relative_numbers = false,
  show_symbol_details = true,
  preview_bg_highlight = 'Pmenu',
  keymaps = { -- These keymaps can be a string or a table for multiple keys
      close = {"<Esc>", "q"},
      goto_location = "<Cr>",
      focus_location = "o",
      hover_symbol = "<C-space>",
      toggle_preview = "K",
      rename_symbol = "r",
      code_actions = "a",
  },
  lsp_blacklist = {},
  symbol_blacklist = {},
  symbols = {
      File = {icon = "", hl = "TSURI"},
      Module = {icon = "", hl = "TSNamespace"},
      Namespace = {icon = "", hl = "TSNamespace"},
      Package = {icon = "", hl = "TSNamespace"},
      Class = {icon = "𝓒", hl = "TSType"},
      Method = {icon = "ƒ", hl = "TSMethod"},
      Property = {icon = "", hl = "TSMethod"},
      Field = {icon = "", hl = "TSField"},
      Constructor = {icon = "", hl = "TSConstructor"},
      Enum = {icon = "ℰ", hl = "TSType"},
      Interface = {icon = "ﰮ", hl = "TSType"},
      Function = {icon = "", hl = "TSFunction"},
      Variable = {icon = "", hl = "TSConstant"},
      Constant = {icon = "", hl = "TSConstant"},
      String = {icon = "𝓐", hl = "TSString"},
      Number = {icon = "#", hl = "TSNumber"},
      Boolean = {icon = "⊨", hl = "TSBoolean"},
      Array = {icon = "", hl = "TSConstant"},
      Object = {icon = "⦿", hl = "TSType"},
      Key = {icon = "🔐", hl = "TSType"},
      Null = {icon = "NULL", hl = "TSType"},
      EnumMember = {icon = "", hl = "TSField"},
      Struct = {icon = "𝓢", hl = "TSType"},
      Event = {icon = "🗲", hl = "TSType"},
      Operator = {icon = "+", hl = "TSOperator"},
      TypeParameter = {icon = "𝙏", hl = "TSParameter"}
  }
}
EOF
'''
