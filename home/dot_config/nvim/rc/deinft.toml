
# -------------------------------------------------------------------
# settings

[ftplugin]

html = '''
  " nnoremap <silent> <buffer> <leader>m :silent! exec '!brave-browser --new-window -- '  .  resolve(expand('%:p'))<cr>
'''

gdscript = '''
  setl tabstop=2
  setl shiftwidth=2
  setl noexpandtab

  " setl foldmethod=expr

  let b:caw_oneline_comment = '#'
  nnoremap <buffer> <leader>lf :exec '!gdformat -l 80 '  .  resolve(expand('%:p'))<cr>
'''

toml = '''
  set keywordprg=:help
'''

markdown = '''
  " setl spelllang=en,de
  " setl spell
  " setl textwidth=80

  " setl linebreak
  " setl showbreak="> "
  " setl breakindent
  " setl formatoptions+=wa

  setl nofoldenable
  setl foldcolumn=0

  nnoremap <buffer> <leader>n :exec 'FloatermNew --autoclose=2 --disposable --width=0.95 --height=0.95 glow -w 200 '<CR>

  " correct spelling in insert
'''

tex = '''
  setl spelllang=en,de
  setl spell

  " nnoremap <buffer> <silent> <leader>m :exec 'FloatermNew --autoclose=0 --disposable --width=0.95 --height=0.95 latexmk -pdf ' . resolve(expand('%'))<CR>
  nnoremap <buffer> <silent> <leader>m :exec "vsplit ./latex/output/" . resolve(expand('%:t:r')) . ".log"<cr>
  nnoremap <buffer> <silent> <leader>n :call jobstart('zathura ./latex/output/' . resolve(expand('%:t:r')) . '.pdf', {'detach':1})<cr>
'''

vim = '''
'''

sh = '''
  nnoremap <buffer> <leader>n :exec 'FloatermNew --disposable --width=0.95 --height=0.95 ' . resolve(expand('%:p')) <CR>
'''

cpp = '''

  " compiler options
  if !exists("current_compiler")
    let current_compiler = "cpp"

    let s:cpo_save = &cpo
    set cpo-=C

    " CompilerSet makeprg=make

    let &cpo = s:cpo_save
    unlet s:cpo_save
  endif

  " cpp settings
  if !exists("current_compiler")
    compiler cpp
  endif

  " let g:LanguageClient_serverCommands = {
  "  \ 'cpp': ['clangd'],
  "  \ }

  " set cindent
  " setl foldmethod=syntax
  " set foldmethod=expr
  " set foldexpr=nvim#treesitter#foldexpr()

  nnoremap <buffer> <leader>n :FloatermNew --autoclose=0 --disposable ./release/binary<CR>
'''

python = '''
  setl foldmethod=indent
  " setl foldexpr=nvim#treesitter#foldexpr()
  nnoremap <silent> <buffer> <leader>n :exec 'FloatermNew --autoclose=0 --disposable python3 ' . resolve(expand('%:p')) <CR>
'''

nim = '''
  " nnoremap <silent> <buffer> <leader>m :exec 'FloatermNew --autoclose=0 --disposable nim c ' . resolve(expand('%:p')) <CR>
  nnoremap <silent> <buffer> <leader>n :exec 'FloatermNew --autoclose=0 --disposable nim r ' . resolve(expand('%:p')) <CR>
  nnoremap <silent> <buffer> <leader>lf :exec '!nimpretty ' . resolve(expand('%:p')) <CR>
'''

lua = '''
  " nnoremap <silent> <buffer> <leader>m :exec 'FloatermNew --autoclose=0 --disposable nim c ' . resolve(expand('%:p')) <CR>
  nnoremap <silent> <buffer> <leader>n :exec 'FloatermNew --autoclose=0 --disposable luajit ' . resolve(expand('%:p')) <CR>
  nnoremap <silent> <buffer> <leader>lf :exec '!nimpretty ' . resolve(expand('%:p')) <CR>
'''

# -------------------------------------------------------------------
# plugins

[[plugins]]
repo = 'https://github.com/zah/nim.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_post_source = '''
  let g:vim_markdown_folding_disabled = 1
'''


[[plugins]]
repo = 'https://github.com/jbyuki/nabla.nvim'
on_ft = ['markdown', 'txt']
hook_post_source = '''
  nnoremap <F5> :lua require("nabla").action()<CR>
'''

# [[plugins]]
# repo = 'https://github.com/brymer-meneses/grammar-guard.nvim'
# on_ft = ['markdown', 'tex', 'latex', 'bib']
# depends = 'lspconfig'
# hook_post_source = '''
# lua <<EOF
# require("grammar-guard").init()
#
# local on_attach = function(client, bufnr)
#   local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
#
#   local opts = { noremap=true, silent=true }
#   if client.resolved_capabilities.code_action then
#     buf_set_keymap("n", "<space>la", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
#   end
# end
#
# local Dictionary_file = {
#     ["en"] = {vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/dictionary.txt"))}
# }
# local DisabledRules_file = {
#     ["en"] = {vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/disable.txt"))}
# }
# local FalsePositives_file = {
#     ["en"] = {vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/false.txt"))}
# }
#
# require("lspconfig").grammar_guard.setup({
#   on_attach = on_attach,
#   flags = {
#     debounce_text_changes = 150,
#   },
#   settings = {
#     ltex = {
#       enabled = { "latex", "tex", "bib", "markdown" },
#       language = "en",
#       diagnosticSeverity = "information",
#       setenceCacheSize = 2000,
#       additionalRules = {
#         enablePickyRules = true,
#         motherTongue = "en",
#       },
#       trace = { server = "verbose" },
#       dictionary = {
#           ["en"] = {":" .. vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/dictionary.txt"))}
#       };
#       disabledRules = {
#           ["en"] = {":" .. vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/disable.txt"))}
#       };
#       hiddenFalsePositives = {
#           ["en"] = {":" .. vim.fn.resolve(vim.fn.expand("$XDG_CONFIG_HOME/nvim/spell/false.txt"))}
#       };
#     },
#   },
# })
# EOF
# '''


[[plugins]]
repo = 'habamax/vim-godot'
on_ft = 'gdscript'
hook_source = '''
  nnoremap <F4> :GodotRunLast<CR>
  nnoremap <leader>n :GodotRun<CR>
  nnoremap <F6> :GodotRunCurrent<CR>
  nnoremap <F7> :GodotRunFZF<CR>
'''

[[plugins]]
repo = 'https://github.com/mattn/emmet-vim'
on_ft = [ 'html', 'css' , 'vue']
hook_add = '''
    let g:user_emmet_leader_key='<C-t>'
    let g:user_emmet_mode='in'
'''

[[plugins]]
repo = 'https://github.com/norcalli/nvim-colorizer.lua'
if = 'has("nvim")'
on_ft = [ 'kitty', 'yaml', 'html', 'css', 'javascript' ]
hook_post_source = '''
lua <<EOF
require 'colorizer'.setup {
  'css';
  'javascript';
  'yaml';
  'kitty';
  html = {
    mode = 'foreground';
  }
}
EOF
'''

[[plugins]]
repo = 'https://github.com/posva/vim-vue'
on_ft = 'vue'
frozen = true

# for xmlattr
[[plugins]]
repo = 'https://github.com/kana/vim-textobj-user'
name = 'vim-textobj-user'

[[plugins]]
repo = 'https://github.com/whatyouhide/vim-textobj-xmlattr'
depends = 'vim-textobj-user'
on_ft = [ 'html', 'vue' ]

[[plugins]]
repo = 'https://github.com/leafgarland/typescript-vim'
frozen = true
on_ft = 'typescript'
hook_add = '''
  let g:typescript_compiler_options = '--outDir out'
'''

# for package-info
[[plugins]]
repo = 'https://github.com/MunifTanjim/nui.nvim'
name = 'nui'

[[plugins]]
repo = 'https://github.com/vuki656/package-info.nvim'
depends = 'nui'
on_path = 'package.json'
hook_post_source = '''
lua <<EOF
require('package-info').setup()

vim.api.nvim_set_keymap("n", "<leader>js", ":lua require('package-info').show()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>jh", ":lua require('package-info').hide()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>ju", ":lua require('package-info').update()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>jd", ":lua require('package-info').delete()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>ji", ":lua require('package-info').install()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>jr", ":lua require('package-info').reinstall()<CR>", { silent = true, noremap = true })
vim.api.nvim_set_keymap("n", "<leader>jp", ":lua require('package-info').change_version()<CR>", { silent = true, noremap = true })

EOF
'''

[[plugins]]
repo = 'https://github.com/fladson/vim-kitty'
on_path = ['kitty.conf', 'kitty_keyboard.conf', 'kitty_colors.conf', 'diff.conf']

# [[plugins]]
# repo = 'https://github.com/lervag/vimtex'
# on_ft = [ 'tex', 'bib' ]
# hook_add = '''
#   let g:vimtex_enabled = 1
#   let g:vimtex_mappings_enabled = 1
#   let g:vimtex_mappings_disable = {}
#   let g:vimtex_text_obj_enabled = 1
#   let g:vimtex_motion_enabled = 1
#   let g:vimtex_imaps_enabled = 0
#
#   let g:vimtex_indent_enabled = 1
#   let g:vimtex_indent_bib_enabled = 1
#   let g:vimtex_toc_enabled = 1
#   let g:vimtex_toc_config = {
#     'mode': 4,
#   }
#
#   let g:vimtex_view_enabled = 1
#   let g:vimtex_view_method = 'zathura'
#   let g:vimtex_compiler_enabled = 1
#   let g:vimtex_quickfix_enabled = 1
#   let g:vimtex_compiler_latexmk = {
#       \ 'build_dir' : 'output',
#       \ 'callback' : 1,
#       \ 'continuous' : 1,
#       \ 'executable' : 'latexmk',
#       \ 'hooks' : [],
#       \ 'options' : [
#       \   '-verbose',
#       \   '-file-line-error',
#       \   '-synctex=1',
#       \   '-interaction=nonstopmode',
#       \ ],
#       \}
#
#   let g:vimtex_complete_enabled = 0
#   let g:vimtex_fold_enabled = 0
#   let g:vimtex_fold_bib_enabled = 0
#   let g:vimtex_format_enabled = 0
#   let g:vimtex_include_search_enabled = 0
#   let g:vimtex_matchparen_enabled = 0
#   let g:vimtex_syntax_enabled = 0
# '''

# -------------------------------------------------------------------
# writing

# [[plugins]]
# repo = 'junegunn/goyo.vim'
# hook_source = '''
#   let g:goyo_width=85
# '''
#
# [[plugins]]
# repo = 'junegunn/limelight.vim'

[[plugins]]
repo = 'https://github.com/folke/zen-mode.nvim'
if = 'has("nvim")'
on_ft = ['txt', 'markdown']

[[plugins]]
repo = 'https://github.com/folke/twilight.nvim'
if = 'has("nvim")'
on_ft = ['txt', 'markdown']

# [[plugins]]
# repo = 'Ron89/thesaurus_query.vim'
# on_ft = ['txt', 'markdown']
#
# [[plugins]]
# repo = 'preservim/vim-wordy'
# on_ft = ['txt', 'markdown']

# -------------------------------------------------------------------
