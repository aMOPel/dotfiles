#!/bin/bash

{{ if and (eq .chezmoi.os "linux") (or (eq .chezmoi.osRelease.idLike "ubuntu debian") (eq .chezmoi.osRelease.idLike "debian")) -}}

echo 'running "install_dependencies.sh"'
read -p "Install All? [y/n]" choice && [[ "$choice" == [yY] ]] || exit 0

# setup env vars
if [[ -z "$XDG_DATA_HOME" ]]; then
  XDG_DATA_HOME=~/.local/share
fi
sudo apt update

# sudo apt install -y bash
# chsh -s $(which bash) $USER
sudo apt install -y bash-completion

sudo apt install -y man-db

# ranger
sudo apt install -y ranger
chmod +x ~/.config/ranger/scope.sh
sudo apt install -y atool
sudo apt install -y zathura
sudo apt install -y ffmpegthumbnailer
sudo apt install -y mediainfo
# sudo apt install -y vlc

# brave
sudo apt install -y apt-transport-https curl gnupg
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install -y brave-browser

# nvim / treesitter / lsp / plugin dependencies
sudo apt install -y gcc
sudo apt install -y g++
sudo apt install -y cmake
# TODO: deprecated method of installation
curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt install -y nodejs

sh -c "$(curl -sSf https://nim-lang.org/choosenim/init.sh)" -- -y

sudo apt install -y python3
sudo apt install -y python3-pip
sudo apt install -y python3-venv

sudo apt install -y unzip
sudo apt install -y xclip

sudo apt install -y locales
sudo locale-gen en_US.UTF-8
sudo update-locale LANG=en_US.UTF-8

# kitty dependencies
sudo apt install -y libdbus-1-3
sudo apt install -y libxcb-xkb1
sudo apt install -y libxkbcommon-x11-0

# shsh dependencies
sudo apt install -y jq
sudo apt install -y git
sudo apt install -y make
sudo apt install -y help2man

# font
sudo apt install -y fontconfig
fc-cache -f

sudo apt update

# shsh
curl -s https://raw.githubusercontent.com/aMOPel/shsh/master/bootstrap/install.sh | sh

export SHSH_ROOT="$HOME/.local/share/shsh"
export PATH="$SHSH_ROOT/bin:$PATH"
eval "$(shsh init bash)"

shsh install --gh-release sharkdp/fd@v8.7.0
shsh install --gh-release BurntSushi/ripgrep@13.0.0
shsh install --gh-release ajeetdsouza/zoxide@v0.9.0
shsh install --gh-release kovidgoyal/kitty@v0.27.1
shsh install --gh-release neovim/neovim@v0.9.0
shsh install -h pre='mv ./completions/chezmoi-completion.bash ./completions/chezmoi.bash' --gh-release twpayne/chezmoi@v2.27.0
shsh install --gh-release sharkdp/bat@v0.23.0
shsh install --gh-release cli/cli@v2.27.0
shsh install --gh-release jesseduffield/lazygit@v0.37.0
shsh install -h pre="mv direnv.linux-amd64 direnv; chmod +x direnv" --gh-release direnv/direnv@v2.32.2
shsh install -v BINS= -v BASH_COMPLETIONS= -v ZSH_COMPLETIONS= -v DEPS= -v MANS= -h pre='./install --key-bindings --completion --no-update-rc --no-zsh --no-fish' -h uninstall=./uninstall junegunn/fzf@0.39.0
shsh install --gh-release sharkdp/hyperfine@v1.17.0
shsh install --gh-release nishanths/license@v5.0.4 # doesn't link correctly

# packer
git clone --depth 1 https://github.com/wbthomason/packer.nvim\
 $XDG_DATA_HOME/nvim/site/pack/packer/start/packer.nvim

# sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator ~/.local/bin/kitty 100

# go
sudo apt install -y curl git mercurial make binutils bison gcc build-essential
bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)

source $HOME/.gvm/scripts/gvm

gvm install go1.4 -B
gvm use go1.4
export GOROOT_BOOTSTRAP=$GOROOT
gvm install go1.17.13
gvm use go1.17.13
export GOROOT_BOOTSTRAP=$GOROOT
gvm install go1.20
gvm use go1.20

go install github.com/posener/complete/v2/gocomplete@v2.1.0
COMP_INSTALL=1 gocomplete

# # python
# sudo apt install -y python3
# sudo apt install -y python3-pip
# sudo apt install -y python3-venv
# pip3 install pynvim
# pip3 install gdtoolkit
# pip3 install neovim-remote
# pip3 install docker-compose
# pip3 install grip

# # docker
# sudo apt install -y ca-certificates lsb-release
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
# echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#
# sudo apt update
# sudo apt install -y docker-ce docker-ce-cli containerd.io
# sudo docker run hello-world
# sudo groupadd docker
# sudo usermod -aG docker $USER


{{ end -}}
# vim:ft=sh:
